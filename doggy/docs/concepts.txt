Doggy Concept
=============================

Dispatcher/Server
---------------------------
The front-end of whole application,all request will be disptached by it. The job of Doggy_Server class is dispatching all request to corresponding modules,actions etc.

Action
---------------------------
The role of Action is a Controller (as MVC,it meant C). You should implement your controll logic in action,call model's method,return result.
Any action will return to a result code.

Action Invocation
---------------------------
An ActionInvocation represents the execution state of an Action. It holds the Interceptors and the Action instance.By repeated re-entrant execution of the invoke() method, initially by the ActionProxy, then by the Interceptors, the Interceptors are all executed, and then the Action and the Result.


Inteceptor
---------------------------
Interceptors are objects that dynamically intercept Action invocations. They provide the developer with the opportunity to define code that can be executed before and/or after the execution of an action. They also have the ability to prevent an action from executing. Interceptors provide developers a way to encapulate common functionality in a re-usable form that can be applied to one or more Actions.
Interceptors <b>must</b> be stateless and not assume that a new instance will be created for each request or Action.Interceptors may choose to either short-circuit the ActionInvocation execution and return a return code Action#SUCCESS, or it may choose to do some processing before and/or after delegating the rest of the procesing using ActionInvocation#invoke().


Filter
---------------------------

Result
----------------------------
All results (except for NONE) of an Action are mapped to a View implementation.Examples of Views might be:
* ActionChainView - executes another action
* RedirectView - redirects the HTTP response to a URL
* SmartyView - render a smarty template as html
* JsonView - render json output to client


Context
----------------------------
###Server Context


###Action Context

The ActionContext is the context in which an Action is executed. Each context is basically a container of objects an action needs for execution like the session, parameters, locale, etc.
