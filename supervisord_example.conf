[supervisord]
logfile=/www/phenix/logs/supervisord.log
pidfile=/www/phenix/var/supervisord.pid
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface
[unix_http_server]
file = /tmp/supervisord.sock
chmod = 0777
#chown = nobody:nobody
username = taihuoniao
password = Thn@_2015#wOrk908

[supervisorctl]
serverurl = unix:///tmp/supervisord.sock
username = taihuoniao
password = Thn@_2015#wOrk908

[program:biz_worker]
# program command
command=/usr/bin/env php workers/point_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/point_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:index_worker]
# program command
command=/usr/bin/env php workers/index_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/point_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:user_worker]
# program command
command=/usr/bin/env php workers/user_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/point_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:phone_worker]
# program command
command=/usr/bin/env php workers/phone_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/phone_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:queue_worker]
# program command
command=/usr/bin/env php workers/queue_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/queue_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:edm_worker]
# program command
command=/usr/bin/env php workers/edm_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/queue_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:remath_worker]
# program command
command=/usr/bin/env php workers/remath_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/remath_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:xs_index_worker]
# program command
command=/usr/bin/env php workers/xs_index_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/search_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:xs_index_update_worker]
# program command
command=/usr/bin/env php workers/xs_index_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/search_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:active_expired_worker]
# program command
command=/usr/bin/env php workers/active_expired_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/active_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:user_point_stat_worker]
# program command
command=/usr/bin/env php workers/user_point_stat_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/user_point_stat_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:order_expire_worker]
# program command
command=/usr/bin/env php workers/order_expire_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/order_expire_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:push_baidu_worker]
# program command
command=/usr/bin/env php workers/push_baidu_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/push_baidu_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:d_order_expire_worker]
# program command
command=/usr/bin/env php workers/d_order_expire_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/d_order_expire_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:d_appoint_expire_worker]
# program command
command=/usr/bin/env php workers/d_appoint_expire_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/d_appoint_expire_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:try_auto_apply_worker]
# program command
command=/usr/bin/env php workers/try_auto_apply_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/try_auto_apply_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:comment_auto_love_worker]
# program command
command=/usr/bin/env php workers/comment_auto_love_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/comment_auto_love_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:try_auto_status_worker]
# program command
command=/usr/bin/env php workers/try_auto_status_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/try_auto_status_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:clean_worker]
# program command
command=/usr/bin/env php workers/clean_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/clean_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:daily_track_worker]
# program command
command=/usr/bin/env php workers/daily_track_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/daily_track_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:item_auto_love_worker]
# program command
command=/usr/bin/env php workers/item_auto_love_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/item_auto_love_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:app_time_push_worker]
# program command
command=/usr/bin/env php workers/app_time_push_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/app_time_push_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:auto_view_count_worker]
# program command
command=/usr/bin/env php workers/auto_view_count_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/auto_view_count_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:app_store_user_stat_worker]
# program command
command=/usr/bin/env php workers/app_store_user_stat_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/app_store_user_stat_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:app_clean_push_worker]
# program command
command=/usr/bin/env php workers/app_clean_push_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/app_clean_push_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:gen_rss_01_worker]
# program command
command=/usr/bin/env php workers/gen_rss_01_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/gen_rss_01_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=

[program:find_fiu_user_worker]
# program command
command=/usr/bin/env php workers/find_fiu_user_worker.php
# if program terminated, will start it again
autorestart=true
# output log
stdout_logfile=/www/phenix/logs/supervisord/find_fiu_user_worker.log
# stderr to stdout
redirect_stderr=true
# don't care the program running time
startsecs = 0
# directory=
